#' otu_tabs = list(Phylum = bpd_phy, Class = bpd_cla,
#' Order = bpd_ord, Family = bpd_fam)
#'
#' set <- tidy_micro(otu_tabs = otu_tabs, clinical = bpd_clin)
#'
#' set %>% pca_3d(table = "Family", time_var = day, subject = study_id,
#' legend_title = "Day")
#' @export
pca_3d <- function(micro_set, table, time_var, subject, y = clr,
dist_method = "euclidean", type = "PCoA", plot_scores = FALSE,
pch = 16, cex.axis = 1, cex.lab = 1, cex = 1,
main = NULL, subtitle = NULL, scalewt = TRUE,
print.legend = TRUE,
legend.title = "Time Points", legend.position = 'right'){
#  modes = c("AC","BA","CB"),
#  #' @param modes Components of the data to focus on: time, subjects, bacteria, etc. "AC" by default
if(table %nin% unique(micro_set$Table)) stop("Specified table is not in supplied micro_set")
modes <- "ACplot"
## Making the wide otu format that is needed for U_matrices
wide_otu <- micro_set %>%
A_matricization(table = table, subject = !!rlang::enquo(subject),
y = !!rlang::enquo(y),
time_var = !!rlang::enquo(time_var))
## Number of timepoints, subjects, and taxa
time_v <- micro_set %>% dplyr::pull(!!rlang::enquo(time_var)) %>% unique %>% sort
n_time <- length(time_v)
n_sub <- nrow(wide_otu); n_taxa <- ncol(wide_otu)/n_time
message("Found ", n_time, " time points and ", n_sub, " subjects with complete cases.")
## Pulls the maximum number of components if not specified
## Get better plots when you don't do this
n_compA <- n_sub; n_compB <- n_taxa; n_compC <- n_time
if(type %nin% c("PCA", "PCoA")) stop("'type' must be either 'PCA' or 'PCoA'")
## Scales the OTU counts which is recommended by KW Thesis
if(scalewt) wide_otu %<>% ade4::scalewt()
if(type == "PCA"){
## Principle Components (start = 0)
T3P <- ThreeWay::T3func(wide_otu, n = n_sub, m = n_taxa, p = n_time,
r1 = n_compA, r2 = n_compB, r3 = n_compC,
start = 0, conv = 0.0000000000000002)
T3P <- T3_plots(r1 = n_compA, r2 = n_compB, r3 = n_compC,
T3P, modes, plot_scores)[modes] %>%
as.data.frame
} else if(type == "PCoA"){
T3 <- U_matrices(wide_otu, method = dist_method, n_compA, n_compB, n_compC,
n_sub, n_taxa, n_time)
## Principle Coordinant (we define the component matrices, start = 2)
T3P <- ThreeWay::T3func(wide_otu, n = n_sub, m = n_taxa, p = n_time,
r1 = n_compA, r2 = n_compB, r3 = n_compC,
start = 2, conv = 0.0000000000000002,
T3$A,T3$B,T3$C,T3$G)
T3P <- T3_plots(r1 = n_compA, r2 = n_compB, r3 = n_compC,
T3P, modes, plot_scores)[modes] %>%
as.data.frame
}
if(modes == "ACplot"){
cc <- factor(rep(seq(1,n_time), each = n_sub))
scatterplot3d::scatterplot3d(T3P[,1], T3P[,2], T3P[,3],
color = cc, pch=pch,
xlab = "B1", ylab = "B2", zlab = "B3",
cex.axis = cex.axis, cex.lab = cex.lab,
main = main, sub = subtitle)
if(print.legend){
graphics::legend(legend.position, legend = time_v, cex = cex,
title = legend.title, pch = pch, col = levels(cc))
}
}
}
set %>% pca_3d(table = "Family", time_var = day, subject = study_id, legend_title = "Day")
set %>% pca_3d(table = "Family", time_var = day, subject = study_id, legend.title = "Day")
devtools::check()
long_micro %>%
pca_3d(table = "Family", time_var = day, subject = study_id,
type = "PCoA", legend.title = "Day")
long_micro <- tidy_micro(otu_tabs = otu_tabs,  ## OTU tables
clinical = bpd_clin)  ## clinical Data
identical(long_micro, set)
long_micro %>%
pca_3d(table = "Family", time_var = day, subject = study_id,
type = "PCoA", legend.title = "Day")
## Pulling out important var and arranging by Subject
meta <- micro_set %>%
dplyr::filter(.data$Table == "Family") %>%
dplyr::select(sub = study_id, bpd1) %>%
## Getting distinct rows
dplyr::distinct() %>%
## Only including the subjects in every time point
dplyr::filter(.data$sub %in% rownames(wide_otu)) %>%
dplyr::arrange(.data$sub)
Tmod <- ThreeWay::T3func(wide_otu, n = n_sub, m = n_taxa,
p = n_time, r1 = n_compA, r2 = n_compB, r3 = n_compC,
start = 0,conv = 0.0000000000000002)
Tmod.p <- T3_plots(n_compA, n_compB, n_compC,
Tmod, modes, plot_scores)[modes] %>%
as.data.frame
xlab = "B1"; ylab = "B2"
suppressWarnings(data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub")
suppressWarnings(data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time))
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time))
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub")
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1) +
ggplot2::geom_point() +
ggplot2::labs(title = main, subtitle = subtitle, x = xlab, y = ylab)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time))
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time))
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1) +
ggplot2::geom_point() +
ggplot2::labs(title = main, subtitle = subtitle, x = xlab, y = ylab)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1)) +
ggplot2::geom_point() +
ggplot2::labs(title = main, subtitle = subtitle, x = xlab, y = ylab)
data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time))
Tmod.p
Tmod.p <- T3_plots(n_compA, n_compB, n_compC,
Tmod, modes, plot_scores)
Tmod.p$A_eig
Tmod$La
Tmod$A
Tmod.p$B_eig
Tmod.p$B_eig/sum(Tmod.p$B_eig)
Tmod.p$B_eig[1:2]/sum(Tmod.p$B_eig)
100*round(Tmod.p$B_eig[1:2]/sum(Tmod.p$B_eig), 4)
## x,y Labs
ll <- paste("Component", c("B1","B2"))
ll
## x,y Labs
p.var <- paste0(100*round(Tmod.p$B_eig[1:2]/sum(Tmod.p$B_eig), 4), "%")
paste0("Principle ", c("B1","B2"), "Component", "(", p.var, ")")
paste0("Principle ", c("B1","B2"), " Component ", "(", p.var, ")")
paste0("Principle Component ", c("B1","B2"), "(", p.var, ")")
paste0("Principle Component ", c("B1","B2"), " (", p.var, ")")
## x,y Labs
p.var <- paste0(100*round(Tmod.p$B_eig[1:2]/sum(Tmod.p$B_eig), 4), "%")
ll <- paste0("Principle Component ", c("B1","B2"), " (", p.var, ")")
Tmod.p <- Tmod.p[modes] %>% as.data.frame
gg <- suppressWarnings(data.frame(x = Tmod.p[,1], y = Tmod.p[,2],
sub = rep(rownames(wide_otu), each = n_time)) %>%
dplyr::full_join(meta, by = "sub") %>%
ggplot2::ggplot(ggplot2::aes(x = .data$x, y = .data$y,
col = bpd1)) +
ggplot2::geom_point() +
ggplot2::labs(title = main,
subtitle = subtitle, x = ll[1], y = ll[2])
)
gg <- gg + ggplot2::labs(col = legend_title)
gg + ggplot2::theme_bw()
devtools::check()
devtools::check()
shiny::runApp('~/Documents/Research/Current/MetaboGuru/Carpenter/RCode/ShinyApp/PaIRKAT')
runApp('~/Documents/Research/Current/MetaboGuru/Carpenter/RCode/ShinyApp/PaIRKAT')
runApp('~/Documents/Research/Current/MetaboGuru/Carpenter/RCode/ShinyApp/PaIRKAT')
citation("bioconductor")
citation("BiocManager")
citation("Shiny")
citation("shiny")
similarity.invlogweighted
C_R_igraph_similarity_inverse_log_weighted
g_Directed<-sample_gnp(10, .6, directed = TRUE, loops = FALSE)
similarity(g_Directed, method = "invlogweighted")
g_Directed
V(g_Directed)
E(g_Directed)
plot(g_Directed)
degree(g_Directed)
get.adjacency(g_Directed)
get.adjacency(g_Directed) %>% rowSums()
log(8/13) + log(5/13)
exp(3.255459 )
1/log(degree(g_Directed))
A <- get.adjacency(g_Directed)
A
ll <- 1/log(degree(g_Directed))
ll
A[1,]
A[1,] %*% ll
A[,1] %*% ll
A[,1]
A[1,]
A[,1] & A[1, ]
A[,1] | A[1, ]
as.numeric(A[,1] | A[1, ])
as.numeric(A[,1] | A[1, ]) %*% ll
3.255459
0.3898712 *as.numeric(A[,1] | A[1, ])
sum(0.3898712 *as.numeric(A[,1] | A[1, ]))
ll
1/log(13)
ll <- 1/log(13)
A
A[1,] & A[,1]
sum((A[1,] & A[,1])*ll)
gg <-
3.255459
gg
sum((A[1,] & A[,1])*ll) * 2
sum((A[1,] | A[,1])*ll)
A[1,] + A[,1]
(A[1,] + A[,1])*ll
(A[1,] + A[,1])*ll %>% sum
sum((A[1,] + A[,1])*ll)
sum((A[1,] + A[,1])*ll)/2
sum(c(A[1,], A[,1]))
sum(c(A[1,], A[,1])) * ll
similarity(g_Directed, method = "invlogweighted")
similarity(g_Directed, method = "invlogweighted")
A
A[1,]
A[1,] | A[,1]
sum(A[1,] | A[,1]) * ll
sum(A[1,] | A[,1]) * ll - gg
ll
gg
gg/ll
dd <- degree(g_Directed)
dd
1/log(dd)
dd <- 1/log(dd)
dd
(A[1, ] | A[,1])
(A[1, ] | A[,1]) %*% dd
(A[1, ] | A[,1]) *dd
sum((A[1, ] | A[,1]) *dd)
(A[1, ] & A[,1]) %*% dd
gg
(A[1, ] & A[,1]) %*% dd * 2
(A[1, ] & A[,1]) %*% dd * 2 == gg
as.numeric((A[1, ] & A[,1]) %*% dd * 2) == gg
gg
(A[1, ] & A[,1]) %*% dd * 2
g_Undirected<-sample_gnp(10, .6, directed = FALSE, loops = FALSE)
g_Undirected %>% plot
A_u <- get.adjacency(g_Undirected)
A_u
A <- get.adjacency(g_Directed)
gg
dd <- log(degree(g_Directed))
A <- get.adjacency(g_Directed)
# The "common" neighbors
common <- A[1,] & A[,1]
# Times two by convention of "common" between both
(common %*% dd) * 2
dd <- 1/log(degree(g_Directed))
A <- get.adjacency(g_Directed)
# The "common" neighbors
common <- A[1,] & A[,1]
# Times two by convention of "common" between both
(common %*% dd) * 2
gg
devtools::check()
data("mtcars")
data("mtcars")
t_dim <- dim(mtcars)
range <- range(mtcars$mpg)
devtools::build()
library(tidyMicro)
# Helpful functions
`%nin%` <- Negate(`%in%`)
library(tidyMicro); library(magrittr)
## Function to remove "Bacteria/ from Taxa names
rm.bact <- function(Taxa, .sep = "/"){
Taxa %<>% str_split(.sep) %>%
lapply(function(t){
if(t[1]=="Bacteria") t <- t[-1]
paste(t, collapse = .sep)
})
Taxa %>% unlist
}
pull.lev <- function(Taxa, l, sep = "/"){
Taxa %>% str_split(sep) %>%
lapply(function(t, l.){
if(length(t) >= l) t <- t[length(t)]
else if(any(t == "Other")) t <- t
else if(length(t) < l) t <- paste("Unclassified", t[length(t)])
t
}, l. = l) %>%
unlist
}
data("mrsa_clin"); data("mrsa_gen")
tidy.mrsa <- tidy_micro(mrsa.gen, "Genus", mrsa.clin)
data("mrsa_clin")
force(mrsa_gen)
force(mrsa_clin)
tidy.mrsa <- tidy_micro(mrsa_gen, "Genus", mrsa_clin)
filt.mrsa <- tidy.mrsa %>%
otu_filter(prev_cutoff = 1, ra_cutoff = 1,
exclude_taxa = c("Unclassified", "Bacteria"))
## Figure 3 ####
plt.thm <- element_text(face = "bold")
## PCA
pc <- micro_pca(tidy.mrsa, table = "Genus", grp_var = MRSA_Positive,
main = "PCA Plot", legend_title = 'Aureus') +
theme(text = plt.thm)
pc$data$groups <- ifelse(pc$data$groups == "N", "Negative", "Positive")
pc
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
pco <- micro_pca(tidy.mrsa, table = "Genus", dist= mrsa.bray, grp_var = MRSA_Positive,
main = "PCoA Plot", legend_title = 'Aureus') +
theme(text = plt.thm)
pco$data$groups <- ifelse(pco$data$groups == "N", "Negative", "Positive")
pco
names(mrsa_clin)
load("~/Documents/Research/tidyMicro/data/mrsa_clin.rda")
mrsa_clin
mrsa_clin %>% names()
names(tidy.mrsa)
load("/Users/carpecha/Documents/Research/tidyMicro/data/mrsa_clin.rda")
mrsa_clin %>% names()
# # mrsa.gen$OTU_Name[which(duplicated(pull.lev(mrsa.gen$OTU_Name, 6)))]
# load("~/Documents/Research/tidyMicro/data/MRSA_clin.rda")
#
# mrsa.clin %<>% dplyr::select(-Sex)
# save(mrsa.clin, file = "~/Documents/Research/tidyMicro/data/MRSA_clin.rda")
#
# sum(names(mrsa.gen) %in% mrsa.clin$Lib)
# mrsa.gen <- mrsa.gen[, 1:53]
# mrsa.gen$OTU_Name %<>% rm.bact
#
load("/Users/carpecha/Documents/Research/tidyMicro/data/mrsa_clin.rda")
data("mrsa_gen")
tidy.mrsa <- tidy_micro(mrsa_gen, "Genus", mrsa_clin)
filt.mrsa <- tidy.mrsa %>%
otu_filter(prev_cutoff = 1, ra_cutoff = 1,
exclude_taxa = c("Unclassified", "Bacteria"))
filt.mrsa <- tidy.mrsa %>%
otu_filter(prev_cutoff = 1, ra_cutoff = 1,
exclude_taxa = c("Unclassified", "Bacteria"),
filter_summary = F)
## Figure 3 ####
plt.thm <- element_text(face = "bold")
names(tidy.mrsa)
## Figure 3 ####
plt.thm <- element_text(face = "bold")
## PCA
pc <- micro_pca(tidy.mrsa, table = "Genus", grp_var = Aureus_Positive,
main = "PCA Plot", legend_title = 'Aureus') +
theme(text = plt.thm)
pc$data$groups <- ifelse(pc$data$groups == "N", "Negative", "Positive")
pc
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
pco <- micro_pca(tidy.mrsa, table = "Genus", dist= mrsa.bray, grp_var = Aureus_Positive,
main = "PCoA Plot", legend_title = 'Aureus') +
theme(text = plt.thm)
pco$data$groups <- ifelse(pco$data$groups == "N", "Negative", "Positive")
pco
pco <- micro_pca(tidy.mrsa, table = "Genus", dist= mrsa.bray, grp_var = Aureus_Positive,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
pco$data$groups <- ifelse(pco$data$groups == "N", "Negative", "Positive")
pco
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
pco <- micro_pca(tidy.mrsa, table = "Genus", dist= mrsa.bray, grp_var = Aureus_Positive,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
pco$data$groups <- ifelse(pco$data$groups == "N", "Negative", "Positive")
pco
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
pco <- tidy.mrsa %>%
mutate(AP = case_when(Aureus_Positive == "N" ~ "Negative",
Aureus_Positive == "Y" ~ "Positive")) %>%
micro_pca(table = "Genus", dist= mrsa.bray, grp_var = Aureus_Positive,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
pco
pco <- tidy.mrsa %>%
mutate(AP = case_when(Aureus_Positive == "N" ~ "Negative",
Aureus_Positive == "Y" ~ "Positive")) %>%
micro_pca(table = "Genus", dist= mrsa.bray, grp_var = AP,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
tidy.mrsa %>%
mutate(AP = case_when(Aureus_Positive == "N" ~ "Negative",
Aureus_Positive == "Y" ~ "Positive")) %>%
micro_pca(table = "Genus", dist= mrsa.bray, grp_var = AP,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
mrsa.clin <- read.table("~/Documents/Research/Current/test_dat/MRSA_Nasal_Clin",
header = T)
names(mrsa.clin)[c(1, 14)] <- c("Subject", "Smoking")
mrsa.clin %<>% unite(Lib, Case_or_Control, Subject, sep = ".", remove = F)
table(mrsa.clin$Aureus_Positive, mrsa.clin$MRSA_Positive)
# dim(mrsa.gen)
# mrsa.gen$OTU_Name[which(duplicated(pull.lev(mrsa.gen$OTU_Name, 6)))]
mrsa.clin <- read.table("~/Documents/Research/Current/test_dat/MRSA_Nasal_Clin",
header = T)
names(mrsa.clin)[c(1, 14)] <- c("Subject", "Smoking")
mrsa.clin %<>% unite(Lib, Case_or_Control, Subject, sep = ".", remove = F)
mrsa_clin <- mrsa.clin %>%
dplyr::select(-HIV)
save(mrsa_clin, file = "~/Documents/Research/tidyMicro/data/mrsa_clin.rda")
data("mrsa_gen")
tidy.mrsa <- tidy_micro(mrsa_gen, "Genus", mrsa_clin)
filt.mrsa <- tidy.mrsa %>%
otu_filter(prev_cutoff = 1, ra_cutoff = 1,
exclude_taxa = c("Unclassified", "Bacteria"),
filter_summary = F)
## Figure 3 ####
plt.thm <- element_text(face = "bold")
## PCA
pc <- micro_pca(tidy.mrsa, table = "Genus", grp_var = Aureus_Positive,
main = "PCA Plot", legend_title = 'Aureus') +
theme(text = plt.thm)
pc$data$groups <- ifelse(pc$data$groups == "N", "Negative", "Positive")
pc
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
tidy.mrsa %>%
mutate(AP = case_when(Aureus_Positive == "N" ~ "Negative",
Aureus_Positive == "Y" ~ "Positive")) %>%
micro_pca(table = "Genus", dist= mrsa.bray, grp_var = AP,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
tidy.mrsa %>% names
## ra_bars
br <- ra_bars(tidy.mrsa, table = "Genus", Aureus_Positive, top_taxa = 10,
xaxis = c("Aureus\nNegative", "Aureus\nPositive")) + theme(text = plt.thm)
br$data$Taxa %<>% pull.lev(6)
br
ra_bars(tidy.mrsa, table = "Genus", Lib, top_taxa = 10)
rr <- ra_bars(tidy.mrsa, table = "Genus", Lib, top_taxa = 10)
rr$data$Taxa %<>% pull.lev(6)
rr
rr + theme(axis.text.x = element_text(angle = 90))
library(testthat)
usethis::use_testthat()
## PCoA
mrsa.bray <- beta_div(tidy.mrsa, "Genus")
tidy.mrsa %>%
mutate(AP = case_when(Aureus_Positive == "N" ~ "Negative",
Aureus_Positive == "Y" ~ "Positive")) %>%
micro_pca(table = "Genus", dist= mrsa.bray, grp_var = AP,
main = "PCoA Plot", legend_title = 'Aureus', ellipse = T) +
theme(text = plt.thm)
## ra_bars
br <- ra_bars(tidy.mrsa, table = "Genus", Aureus_Positive, top_taxa = 10,
xaxis = c("Aureus\nNegative", "Aureus\nPositive")) + theme(text = plt.thm)
br$data$Taxa %<>% pull.lev(6)
br
co <- filt.mrsa %>%
cor_heatmap(table = "Genus", Age)
co$data$Taxa %<>% pull.lev(6); co
## Figure 4 ####
cor.brk <- rep(c(.2,.25,.3), each = 2) * c(-1,1)
filt.mrsa %>%
cor_rocky_mtn(table = "Genus", x = Age, breaks = cor.brk,
cor_label = 0.3)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Sex, Smoking)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Sex, Smoking)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive * Age)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Smoking)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Smoking)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Smoking)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive, alpha = 0.01)
micro_rocky_mtn
nb.gen$Convergent_Summary$Taxa
nb.gen$Convergent_Summary$Taxa %<>% pull.lev(6)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive, alpha = 0.01)
nb.gen$Convergent_Summary$Taxa
micro_rocky_mtn
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive, alpha = 0.01)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Smoking)
nb.gen$Convergent_Summary$Taxa %<>% pull.lev(6)
micro_rocky_mtn(modsum = nb.gen, Aureus_Positive, alpha = 0.01)
## Figure 7 ####
nb.gen <- nb_mods(filt.mrsa, table = "Genus", Aureus_Positive, Age, Smoking)
